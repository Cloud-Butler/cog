# ========================================================================
# Cog Telemetry - By default, Cog is configured to send an event to the
# Operable telemetry service every time it starts. This event contains a
# unique ID (based on the SHA256 of the UUID for your operable bundle),
# the Cog version number, and the Elixir mix environment (:prod, :dev, etc)
# that Cog is running under.
# If you would like to opt-out of sending this data, you can set the
# COG_TELEMETRY environment variable to "false".
# ========================================================================
cog.telemetry = true

# ========================================================================
# Set this to :unenforcing to globally disable all access rules.
# NOTE: This is a global setting.
# ========================================================================
# Allowed values: enforcing, unenforcing
cog.rules.mode = enforcing


cog.db.name = "cog"


cog.db.host = "localhost"


cog.db.port = 5432


# cog.db.username = 


cog.db.pool_size = 10


cog.db.pool_timeout = 15000


cog.db.timeout = 15000


cog.db.ssl = false

# Message bus server host name
cog.mqtt_server.host = "127.0.0.1"

# Message bus server port
cog.mqtt_server.port = 1883

# Path to SSL certificate
# cog.mqtt_server.cert_file = 

# Path to SSL private key file
# cog.mqtt_server.key_file = 

# Message bus server host name
cog.mqtt_client.host = "127.0.0.1"

# Message bus server port
cog.mqtt_client.port = 1883

# Enable/disable SSL
# Allowed values: enabled, disabled, no_verify
cog.mqtt_client.ssl = disabled

# Path to message bus server's SSL certificate
# cog.mqtt_client.ssl_cert = 

# Enables/disables spoken commands
cog.commands.allow_spoken = false

# Prefix used to indicate spoken command
cog.command.prefix = "!"

# Maximum command alias expansion depth
cog.command.max_alias_depth = 5

# Interactive pipeline execution timeout
cog.pipeline.timeout = 60

# Trigger execution timeout
cog.trigger.timeout = 300

# Trigger timeouts are defined according to the needs of the
# requestor, which includes network roundtrip time, as well as Cog's
# internal processing. Cog itself can't wait that long to respond, as
# that'll be guaranteed to exceed the HTTP requestor's timeout. As
# such, we'll incorporate a buffer into our internal timeout. Defined
# as seconds
cog.trigger.timeout_buffer = 2

# ========================================================================
# Embedded Command Bundle Version (for built-in commands)
# NOTE: Do not change this value unless you know what you're doing.
# ========================================================================
cog.embedded_bundle_version = "0.15.0"

# Enabled chat providers
cog.chat.providers = Elixir.Cog.Chat.Slack.Provider

# Slack API token
# cog.chat.slack.api_token = 

# HipChat API token
# cog.chat.hipchat.api_token = 

# HipChat Jabber ID
# cog.chat.hipchat.jabber_id = 

# HipChat Jabber Password
# cog.chat.hipchat.jabber_password = 

# HipChat nickname
# cog.chat.hipchat.nickname = 


cog.chat.hipchat.api_root = "https://api.hipchat.com/v2"


cog.chat.hipchat.chat_host = "chat.hipchat.com"


cog.chat.hipchat.conf_host = "conf.hipchat.com"

# Commmand cache TTL (in seconds)
cog.caches.command.ttl = 60

# Access rule cache TTL (in seconds)
cog.caches.rule.ttl = 60

# Template cache TTL (in seconds)
cog.caches.template.ttl = 60

# User permission cache TTL (in seconds)
cog.caches.user_perms.ttl = 60

# Automatically create Cog user accounts for unknown users
cog.allow_self_registration = false

# Email address used to send password reset emails, etc
cog.email.from_address = "cog@localhost"


cog.urls.password_reset_base = ""


cog.urls.trigger_base = ""


cog.urls.service_base = ""


cog.api_token.lifetime = 1


# Allowed values: sec, min, day, week
cog.api_token.lifetime_units = week


cog.api_token.reap_interval = 1


# Allowed values: sec, min, day, week
cog.api_token.reap_interval_units = day

